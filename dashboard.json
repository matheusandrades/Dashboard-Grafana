{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 2,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "cdr251b4j02kgf"
      },
      "gridPos": {
        "h": 1,
        "w": 2,
        "x": 0,
        "y": 0
      },
      "id": 5,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<html>\n<style>\n  body {\n    background-image: url('https://img.freepik.com/free-vector/gradient-network-connection-background_23-2148879890.jpg?size=626&ext=jpg&ga=GA1.1.2113030492.1720224000&semt=ais_user');\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: center;\n  }\n</style>\n</html>",
        "mode": "html"
      },
      "pluginVersion": "11.1.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "cdr251b4j02kgf"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": ""
          },
          "host": {
            "filter": ""
          },
          "item": {
            "filter": ""
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "Background",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "cdr251b4j02kgf"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 13,
        "x": 5,
        "y": 0
      },
      "id": 4,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n</head>\n\n<body>\n  <div class=\"container\">\n    <div class=\"title\">Zabbix Agent</div>\n    <div class=\"status\">\n      STATUS DO AGENT:\n      <span class=\"value {{#if (eq data.[0].Value 1)}}up{{else}}down{{/if}}\">\n        {{#if (eq data.[0].Value 1)}}\n        UP\n        {{else}}\n        DOWN\n        {{/if}}\n          </span>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "allRows",
        "status": "Value",
        "styles": "body {\r\n      margin: 0;\r\n      padding: 0;\r\n      font-family: Arial, sans-serif;\r\n  }\r\n  \r\n  .container {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      background: linear-gradient(90deg, #1f1f1f, #3c3c3c);\r\n      padding: 20px;\r\n      border-radius: 10px;\r\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  }\r\n\r\n  .title {\r\n      font-size: 2rem;\r\n      font-weight: bold;\r\n      color: #ffffff;\r\n      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\r\n  }\r\n\r\n  .status {\r\n      font-size: 1.5rem;\r\n      color: #ffffff;\r\n      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\r\n  }\r\n\r\n  .value {\r\n      padding: 5px 15px;\r\n      border-radius: 5px;\r\n  }\r\n\r\n  .value.up {\r\n      background-color: #00ff00; /* Green for UP */\r\n      color: #000; /* Black text */\r\n  }\r\n\r\n  .value.down {\r\n      background-color: #ff0000; /* Red for DOWN */\r\n      color: #fff; /* White text */\r\n  }",
        "wrap": true
      },
      "pluginVersion": "5.1.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "cdr251b4j02kgf"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Zabbix servers"
          },
          "host": {
            "filter": "Zabbix server"
          },
          "item": {
            "filter": "Zabbix agent availability"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "cdr251b4j02kgf"
      },
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 7,
        "y": 4
      },
      "id": 3,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n\n  const average = sData.reduce((sum, value) => sum + value, 0) / sData.length;\n\n  const adjustedValue = average / 100;\n\n  return {\n    type: 'liquidFill',\n    radius: '90%',\n    data: [adjustedValue],\n    name: s.refId,\n    backgroundStyle: {\n      borderWidth: 5,\n      color: 'pink'\n    },\n    shape: 'circle',\n    outline: {\n      show: false\n    },\n    backgroundStyle: {\n      borderColor: '#156ACF',\n      borderWidth: 1,\n      shadowColor: 'rgba(0, 0, 0, 0.4)',\n      shadowBlur: 20\n    },\n    label: {\n      position: ['50%', '20%'],\n      formatter: function () {\n      },\n      fontSize: 40,\n      color: '#D94854'\n    }\n  };\n});\n\nconst imageUrl = 'https://media.licdn.com/dms/image/C5612AQH1NEHKfVAquw/article-cover_image-shrink_720_1280/0/1580336512966?e=2147483647&v=beta&t=XoyKtkmo3OXIOHstUhx3Ei2P10ESszevkPWBd_SQYSs'; // Caminho da sua imagem\n\nconst option = {\n  backgroundColor: 'transparent',\n  tooltip: {\n    show: false\n  },\n  series: series\n};\n\n// Adicionando uma imagem ao centro do gráfico de preenchimento líquido\noption.graphic = {\n  elements: [{\n    type: 'image',\n    style: {\n      image: imageUrl,\n      width: 100,\n      height: 100\n    },\n    left: 'center',\n    top: 'center'\n  }]\n};\n\nreturn option;\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "cdr251b4j02kgf"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "/.*/"
          },
          "host": {
            "filter": "Zabbix server"
          },
          "item": {
            "filter": "CPU utilization"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "CPU Utilization",
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "cdr251b4j02kgf"
      },
      "gridPos": {
        "h": 7,
        "w": 4,
        "x": 13,
        "y": 4
      },
      "id": 1,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n\n\n  const average = sData.reduce((sum, value) => sum + value, 0) / sData.length;\n\n\n  const adjustedValue = average / 100;\n\n  return {\n    type: 'liquidFill',\n    radius: '90%',\n    data: [adjustedValue],\n    name: s.refId,\n    backgroundStyle: {\n      borderWidth: 5,\n      color: 'pink'\n    }\n  };\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    show: false\n  },\n  series\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "cdr251b4j02kgf"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "/.*/"
          },
          "host": {
            "filter": "Zabbix server"
          },
          "item": {
            "filter": "Memory utilization"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "Memory Utilization",
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "cdr251b4j02kgf"
      },
      "gridPos": {
        "h": 8,
        "w": 13,
        "x": 5,
        "y": 11
      },
      "id": 2,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "// Inicializar arrays para armazenar os dados das séries e os rótulos de tempo\nconst seriesData = [];\nlet timeLabels = [];\n\n// Função para gerar uma cor aleatória\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Função para converter bps para uma unidade legível\nfunction convertBps(value) {\n  if (value >= 1e9) {\n    return { value: (value / 1e9).toFixed(2), unit: 'Gbps' };\n  } else if (value >= 1e6) {\n    return { value: (value / 1e6).toFixed(2), unit: 'Mbps' };\n  } else if (value >= 1e3) {\n    return { value: (value / 1e3).toFixed(2), unit: 'kbps' };\n  } else {\n    return { value: value.toFixed(2), unit: 'bps' };\n  }\n}\n\n// Função para encontrar a unidade mais comum nas séries\nfunction getCommonUnit(series) {\n  const unitCounts = {};\n  series.forEach(serie => {\n    serie.data.forEach(point => {\n      if (!unitCounts[point.unit]) {\n        unitCounts[point.unit] = 0;\n      }\n      unitCounts[point.unit]++;\n    });\n  });\n  return Object.keys(unitCounts).reduce((a, b) => unitCounts[a] > unitCounts[b] ? a : b);\n}\n\n// Iterar pelos frames de dados do Grafana\ncontext.panel.data.series.forEach((series, seriesIndex) => {\n  // Encontrar os campos de valores numéricos e de tempo\n  const timeField = series.fields.find((field) => field.type === 'time');\n  const valueFields = series.fields.filter((field) => field.type === 'number');\n\n  // Iterar sobre cada conjunto de valores numéricos\n  valueFields.forEach((valueField, valueIndex) => {\n    // Garantir que os nomes das séries sejam extraídos corretamente\n    const seriesName = valueField.config.displayNameFromDS || valueField.name || `Series ${seriesIndex + 1}.${valueIndex + 1}`;\n\n    // Mapear os dados de tempo e valores para o formato [tempo, valor, unidade]\n    const data = valueField.values.map((d, index) => {\n      const converted = convertBps(parseFloat(d));\n      return {\n        time: new Date(timeField.values.get(index)).toLocaleTimeString(),\n        value: parseFloat(converted.value),\n        unit: converted.unit\n      };\n    });\n\n    // Adicionar os rótulos de tempo se ainda não estiverem definidos\n    if (timeLabels.length === 0) {\n      timeLabels = timeField.values.map(time => new Date(time).toLocaleTimeString());\n    }\n\n    // Adicionar a série de dados ao array de séries\n    seriesData.push({\n      name: seriesName,\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new context.echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          { offset: 0, color: getRandomColor() },\n          { offset: 1, color: getRandomColor() }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: data\n    });\n  });\n});\n\nconst commonUnit = getCommonUnit(seriesData);\n\nreturn {\n  color: seriesData.map(() => getRandomColor()), // Aplicar cores aleatórias às séries\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    },\n    formatter: function (params) {\n      let tooltipText = params[0].name + '<br/>';\n      params.forEach(param => {\n        const seriesName = param.seriesName;\n        const dataIndex = param.dataIndex;\n        const data = seriesData.find(s => s.name === seriesName).data[dataIndex];\n        tooltipText += `${seriesName}: ${data.value} ${data.unit}<br/>`;\n      });\n      return tooltipText;\n    }\n  },\n  legend: {\n    data: seriesData.map(s => s.name)\n  },\n  toolbox: {\n    orient: 'vertical',\n    left: 'right',\n    top: 'center',\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [{\n    type: 'category',\n    boundaryGap: false,\n    data: timeLabels,\n    axisLine: {\n      lineStyle: {\n        color: '#ccc'\n      }\n    },\n    axisLabel: {\n      textStyle: {\n        color: '#ccc'\n      }\n    },\n    splitLine: {\n      show: false // Remover as linhas de fundo\n    }\n  }],\n  yAxis: [{\n    type: 'value',\n    axisLine: {\n      lineStyle: {\n        color: '#ccc'\n      }\n    },\n    axisLabel: {\n      formatter: function (value) {\n        const converted = convertBps(value);\n        return `${converted.value} ${commonUnit}`;\n      },\n      textStyle: {\n        color: '#ccc'\n      }\n    },\n    splitLine: {\n      show: false // Remover as linhas de fundo\n    }\n  }],\n  series: seriesData.map(s => ({\n    ...s,\n    data: s.data.map(d => d.value)\n  }))\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "return {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "6.1.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "cdr251b4j02kgf"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "/.*/"
          },
          "host": {
            "filter": "Zabbix server"
          },
          "item": {
            "filter": "/received|sent/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-15m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Volks",
  "uid": "edr27imi26sjke",
  "version": 23,
  "weekStart": ""
}
